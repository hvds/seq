The code in this directory is aimed at various OEIS sequences having to
do with finding maximum-length arithmetic progressions of numbers that
share particular properties, such as having the same number of divisors.

The bulk of the C code is aimed specifically at finding values D(n, k)
for A292580, the least integer v such that tau(v + i) = n for all
0 <= i < k.

BUILD
=====

Building this code requires also having the code from Dana Jacobsen's
CPAN distribution "Math-Prime-Util-GMP", available from:
  https://github.com/danaj/Math-Prime-Util-GMP
I recommend using the latest version from github where possible, since
it has a lot of bugfixes since the last release version.

To build, you should edit the first line of the Makefile so that MPUGMP
points to the directory where the Math-Prime-Util-GMP source can be found.
There is no installation process: it is intended that the code should be
built and run in place.

RUN
===

The Makefile will typically build a binary called 'coul'. The standard
way to run it is:
  ./coul [-r<path to logfile>] [-f<force primes>] -x<min:max>
      [-g<damp:gain] [-p<minp:maxp>] [-s<randseed>] [-o] [-d] <n> <k>

Options:
If "-r/path/to/logfile" is specified, progress is regularly written to the
specified file (by default at least once every 600s, see 'LOG' in coul.c).
If the file already exists, it will attempt to determine the last point
reached according to that log, and continue processing from that point.
By default there is no logfile, and progress will only be shown on the
terminal.

If "-f7" is specified, it will set force_all = 7 to treat all primes p <= 7
as fully forced primes (see below). By default, force_all is set to k
(the maximum) when n == 2 (mod 4), and to 0 otherwise.

If "-x100:1000" is specified, it will look for solutions v_0 with
100 < v_0 <= 1000. "-x:1000" or "-x1000" are equivalent to "-x0:1000".
The default minimum is zero; there is no default maximum: this is a
required option.

If "-g2:3" is specified, it will set gain = 3/2. This is a multiplier
used to control the transition from recurse() to walk_v() (see below).
A higher gain means it spends more time in recurse(), a lower gain means
it spends more time in walk_v(). Fine-tuning the gain can make a big
difference to runtime; default gain is 1.

If "-p50:100" is specified, it will allocate (see below) only powers of
primes p < 100, and will allocate at least one power of a prime p > 50.
This can be used to search more selectively to improve an upper limit.
(**"minp" not yet implemented.**) By default it considers all possible
allocations.

If "-s2" is specified, it will initialize the random number generator
with seed 2, used at least for ECM factorization. The default seed is 1,
intended to help make results more reproducible.

If "-o" is specified, it will not attempt to factorize numbers beyond
a certain point, but will instead print them as a possible candidate.
(**Not yet implemented.**) The default is to fully factorize numbers
as far as needed to prove whether they are or are not a candidate.

Specifying "-d" enables debugging. By default, progress is shown on the
terminal every 1 seconds (see "DIAG" in coul.c), overwriting the previous
progress line each time. With "-d", it instead shows progress at every
step on a new line (but only a single line for walk_v()). If "-d" is
specified twice, a line is shown for each iteration of walk_v().

<n> and <k> are mandatory arguments, specifying that we want to search
for D(n, k) (equivalently T(n/2, k) in the terminology of A292580).
<n> must be a positive even integer; <k> must be a positive integer.
Note that this code is optimized for relatively small values of <n>,
targetting 2 <= n <= 100; much higher n may require a lot of memory
and long start-up times.


HOW IT WORKS
============

We know that if p^e | v, and tau(v) = n, then e + 1 | n. The core of the
strategy is to allocate prime powers to each of the values to satisfy
all odd primes dividing n, in every possible way recursively, then to
walk through each of the sets of values consistent with those allocations
up to the specified maximum, checking whether any of them is a solution.

The first part of this is controlled by the function recurse(), the second
is primarily implemented by walk_v().

By convention, v_i is the i'th value (0 <= i < k); we allocate a power
p^e or p^{x - 1}, which contributes a factor of e + 1 or x to the number
of divisors.

recurse()
---------

In the recursive allocation we distinguish between "forced" and "unforced"
primes. Any prime that divides two or more of the values is forced, so
that the powers of that prime are allocated simultaneously to each of the
affected values; for unforced primes we know that no other value is
divisible by it. For primes p: k/2 < p <= k we have the choice: we can
force it at every position (if force_all >= p), meaning that we will try
setting every power at every position; or we can force it only at the
positions we have to, leaving it to be allocated as an unforced prime
in the remaining positions.

  The choice here can significantly affect speed. Eg for D(12, 9), p=7
  we must force p at v_0, v_1, v_7, v_8, but can leave it unforced for
  v_2 .. v_6. Forcing it in those positions means we will specifically
  try allocating, in turn, 7^2, 7^5, 7^11, 7^1, 7^3 at each position;
  unforced, we would only allocate 7^2, 7^5, 7^11 - the possibility
  of 7^1 or 7^3 would be found only by factorization in walk_v().
  Whether forcing all positions is faster seems to depend both on how
  many positions are affected and on how constraining an effect the
  additional allocation has: if it would leave only a square or a prime
  unallocated, it is much more likely to speed things up.

All forced primes are allocated, in order, as the first steps of the
recursion. When all forced primes have been allocated, recursion
continues by calling best_v() to ask which value the next allocation
should be applied to, then looping over the possible powers at that
value, and for each power looping over the possible primes.

If best_v() finds no value to allocate to, we call walk_v() and
derecurse. Otherwise we calculate the maximum prime "lim_p" that we will
need to allocate, and the number of iterations w we would need to walk
if we stopped the recursion at this point. Using lim_p as a proxy for
the cost of recursing further, if w * gain < lim_p, we now call walk_v()
and derecurse, else we allocate a prime and recurse further.

For each allocation, we manage the recursion by tracking what we have
allocated and where we have allocated it in levels[level]. We also keep
a running calculation of "r_q" and "a_q" via the Chinese Remainder Theorem
(CRT) such that we know v_0 == r_q (mod a_q).

We also track allocations to individual values in value[i]; for each
allocation we record p, x, t and q: we have allocated p^{x-1}, the
product of the allocations is q, and the remaining tau() is t.

walk_v()
--------

For each value v_i we find t_i, the remaining unallocated tau(); o_i, q_i
and Q_i (written qq_i), where q_i is the product of the allocations to v_i;
Q_i = a_q/q_i; o_i = (r_q + i) / q_i. Then we know that at iteration j,
we have v_i = q_i(o_i + jQ_i), and we require that o_i + jQ_i is coprime
with q_i, and tau(o_i + jQ_i) = t_i.

We also calculate the inverse -o_i/Q_i modulo each prime p dividing q_i,
so that for each j we can immediately reject it if j % p matches the inverse.

We also classify each t_i according to whether it is odd (need_square[]),
2 (need_prime[]) or anything else (need_other[]).

If need_square[] is empty, we then iterate over the possible values of j
(written "ati"). For each value we first check the inverses, then check
the primes, then check the others, bailing out at the first rejection.
If all tests pass we have a candidate.

  By default we fully check the need_other[] values one at a time;
  there is experimental code used if compiled with "-DPARALLEL", which
  does only one test of each value at a time - when the values get large,
  this can save a lot of time by finding a value that can be rejected
  with fast tests before having to try much slower tests on a value that
  is harder to factorize. However this code needs further improvement
  to maximize the potential savings: the granularity of the tests is
  currently far too small, but we need extensive timings to understand
  how to improve it.

Note (TODO), for the case when need_square[] is empty we restrict j to
fit in 64 bits. The code will abort with an error if the maximum is so
high that this would not be sufficient.

If need_square[] is not empty (see 'nqc' in the code), we use a different
path: if there are multiple squares, we invoke code to solve the Pell
equation involving the first two, and iterate over the results. If there
is exactly one square at v_i, we decide the highest power z we can require
as z = gcd({ d - 1: d | t_i }), find the z'th roots of o_i (mod Q_i) and
iterate only over those.

  Finding the roots is quite expensive. For the general case that's fine,
  since the need_square[] case is rare and it still gives a big speedup
  for this case; for cases such as n == 6 (mod 12), k >= 4, where there
  is _always_ a square, these is an opportunity to make it faster: there
  is work in progress to calculate the roots incrementally as allocations
  are made.

