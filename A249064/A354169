#!/opt/maths/bin/perl
use strict;
use warnings;

$| = 1;
my $style = shift(@ARGV) // 'default';

=head1 A354169

A354169 is the lexically first sequence of positive integers such that
for each element a(n), a(n) AND a(n+i) = 0 for 1 <= i <= n, where 'AND'
is a bitwise logical AND.

The vast majority of the elements have a single bit set, in order of
increasing bits values; we therefore record only those values with
multiple bits set. (We actually store them as a comma-separated list
of indices of those bits.)

Let 2^m(n) be max(a(i): 1 <= i <= n). The list of disallowed bit indices is
then expected to consist of a) a handful of small bit indices (rarely if
ever more than 3 of them), b) a contiguous range of bit indices greater
than around 2/3 m(n) which have never been used in combination with
another bit index.

=cut

my %comp_index; # n => a(n) where a(n) is a comma-separated list of indices
my %comp_value; # a(n) => 1 where a(n) is a comma-separated list of indices
my $n = 0;      # a(0) = 0
# The next bit index that will be used
my $next_used = 0;
# The next bit index that will become free
my $next_free = 0;

# The available small bit indices
my @small;
# Start and end of j > 2/3 m(n) range, or undef if range is empty;
# these are all indices that have been used individually, but never in
# combination with another bit index.
my($min, $max);

sub NOVAL () { 0 }
sub TOOBIG () { 1 }
sub REUSED () { 2 }
sub GOOD () { 3 }

# Flags marking what we're about to use: S for one or more small indices,
# R (r) for first (second) element of the range; U for the next unused index.
sub S () { 1 } sub R () { 2 } sub r () { 4 } sub U () { 8 }

my $best;

my $out = {
    default => sub {
        my($v, $freed) = @_;
        return unless $v =~ /,/;
        exit 0 if $n > 1e9;
        printf "%s %s f=%s s=%s r=%s u=%s\n", $n, $v, $freed,
                join(',', @small), ($min ? "$min..$max" : ""), $next_used;
        return;
    },
    checker => sub {
        return if $n <= 187;
        diag($n) unless $n % 100000;
        keepdiag(), exit 0 if $n >= 1e9;
        my($v) = @_;
        my($f1, $g1) = ($v =~ /,/) ? reverse(split /,/, $v) : ($v, -1);
        my($f0, $g0);
        my $m = ($n + 6) % 12;
        my $q = $n + 6 - $m;
        my $qd;
        my $c =
            (($q % 9) == 0 && ($qd = $q / 9, ($qd & ($qd - 1)) == 0))
                ? 11
            : ($qd = $q / 3, ($qd & ($qd - 1)) == 0)
                ? 15
            : 0;
        if ($c && $m >= 1 && $m <= 7) {
            ($f0, $g0) = [
                undef,
                sub { (($n - 1) / 6, ($n - 7) / 12) },
                sub { ((($n << 1) + 2) / 3, -1) },
                sub { ($n / 3, $c) },
                sub { ((($n << 1) + 1) / 3, -1) },
                sub { ((($n << 1) + 2) / 3, -1) },
                sub { ((($n << 1) + 3) / 3, -1) },
                sub { (($n + 2) / 3, ($n - 1) / 3) },
            ]->[$m]->();
        } else {
            ($f0, $g0) = [
                sub { ((($n << 1) + 3) / 3, -1) },
                sub { (($n + 2) / 3, ($n - 1) / 6) },
                sub { ((($n << 1) + 2) / 3, -1) },
                sub { ((($n << 1) + 3) / 3, -1) },
                sub { ((($n << 1) + 4) / 3, -1) },
                sub {
                    my $h1 = ($n + 1) / 3;
                    $h1 >>= 1 while $h1 && ($h1 & 1) == 0;
                    my $h2 = $h1;
                    $h2 >>= 1 while ($h2 & 1) == 1;
                    my $h3 = $h2;
                    $h3 >>= 1 while $h3 && ($h3 & 1) == 0;
                    my $gn = ($h2 <= 2) ? (
                        {qw{ 5 0 7 2 11 1 15 3 23 4 31 6 47 5 63 7 }}->{$h1}
                                // ($h1 - 3) / 4
                    ) : ($h1 == ($h2 << 1) + 1 && $h3 < 4) ? $h1 - 1
                    : ($h1 - 1) >> 1;
                    (($n + 1) / 3, $g1);
                },
            ]->[$m % 6]->();
        }
        return if $f0 == $f1 && $g0 == $g1;
        die "$n: got ($f1, $g1) expected ($f0, $g0)\n";
    },
}->{$style} // die "Unknown style '$style'";


while (1) {
    ++$n;
    my $freed = ''; # for diagnostics
    if ($n & 1) {
        # bits of a(n/2) newly become available
        if (my $free = delete $comp_index{$n >> 1}) {
            # it's a composite
            my @f = split ',', $free;
            @small = sort { $a <=> $b } (@small, @f);
            $freed = $free;
        } elsif ($n > 1) {
            $min //= $next_free;
            $max = $next_free;
            ++$next_free;
        }
    }

    # Given s_0 < s_1 ... < m < u:
    # - if some s_i s_j is unused, whichever has the least j (whereafter
    #   whichever has the least i) will be the best
    # - else if s_0 and m both exist, s_0 m will be the best
    # - else u will be the best
    $best = { value => $next_used, free => U };
    if (defined($min) && $min < $max) {
        try("$min,@{[ $min + 1 ]}", R | r);
    }
    goto done if @small == 0;

    try("$small[0],$min", S | R, [ 0 ]) if defined $min;
    goto done if @small == 1;

    J: for my $j (1 .. $#small) {
        for my $i (0 .. $j - 1) {
            my $t = try("$small[$i],$small[$j]", S, [ $i, $j ]);
            last J unless $t == REUSED;
        }
    }
    goto done if @small == 2;

    if (try("$small[0],$small[1],$small[2]", S, [ 0, 1, 2 ]) == GOOD) {
        fail("ss's'' $small[0], $small[1], $small[2]");
    }

  done:
    # now act on best
    my $r = $best->{free};
    if ($r & R) {
        if ($min == $max) {
            ($min, $max) = (undef, undef);
        } else {
            ++$min;
            if ($r & r) {
                if ($min == $max) {
                    ($min, $max) = (undef, undef);
                } else {
                    ++$min;
                }
            }
        }
    }
    if ($r & S) {
        splice(@small, $_, 1) for reverse @{ $best->{small} };
    }

    my $v = $best->{value};
    if ($r & U) {
        ++$next_used;
    } else {
        fail("attempt to reuse 2-bit $v") if $comp_value{$v};
        $comp_value{$v} = 1;
        $comp_index{$n} = $v;
    }
    $out->($v, $freed);
}

# Given two comma-separated strings of integers in ascending order,
# return the comparison of the two by comparing them in reverse order
# until a pair of elements differs. If all compared elements are the
# same, instead compare the number of elements.
# Thus 1 < 3 < 1,3 < 2,3 = 2,3.
#
sub compare {
    my($x, $y) = @_;
    my @x = reverse split ',', $x;
    my @y = reverse split ',', $y;
    for my $i (0 .. $#x) {
        my $xi = $x[$i];
        my $yi = $y[$i] // return 1;
        return +($xi <=> $yi) if $xi != $yi;
    }
    return @x <=> @y;
}

sub try {
    my($value, $free, $small) = @_;
    return NOVAL unless $value;
    return TOOBIG unless compare($value, $best->{value}) < 0;
    return REUSED if $comp_value{$value};
    %$best = (value => $value, free => $free, small => $small);
    return GOOD;
}

sub fail {
    my($s) = @_;
    die sprintf "At %s, %s with small=(%s), range=%s\n",
            $n, $s, (join ',', @small), $min ? "$min..$max" : "";
}

{
    my $s; BEGIN { $s = '' }
    sub diag {
        print "\x08 \x08" x length($s);
        $s = shift;
        print $s;
        return;
    }
    sub keepdiag {
        print "\n" if length $s;
        $s = '';
        return;
    }
}
