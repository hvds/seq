#!/opt/maths/bin/perl
use warnings;
use strict;

=head1 van der Waerden

If we define f(n,k) as the size of the largest subset of { 1 .. n }
containing no AP of length k, then we have:
  sum_{i=0}^{r-1}{ f(n,k) } < n => W(r,k) <= n
.. and maybe we can find f(n,k) more easily.

=cut

my @f = (0, 1);     # known values of f(n,3)
findmax();
exit 0;

sub disp {
    my($cp, $n, $ok, $iter) = @_;
    my $s = sprintf "%.2f", (times)[0];
    if ($ok) {
        warn "$n ($iter ${s}s): [@{ $cp->{s} }[0 .. $cp->{i}-1]]\n";
    } else {
        warn "$n ($iter ${s}s): no improvement\n";
    }
}

sub findmax {
    my $n = 1;
    my $max = 1;
    my $iter = 0;
    # context
    my(@s, @stack, $block, $i);
    my $reset = sub {
        @s = (1, 1);
        $block = '';        # empty bit-vector
        @stack = ('', '');
        $i = 1;
    };
    $reset->();
  TRY_NEXT:
    while ($i > 0) {
#warn "for n=$n max=$max i=$i\n";
        ++$iter;
        $block = $stack[$i];
        my $cur = ++$s[$i];
        if ($cur > $n || $i + $f[$n - $cur + 1] <= $max) {
            # unwind stack
            --$i;
            pop @s;
            pop @stack;
            next;
        }
        next if vec($block, $cur, 1);

        # ok to continue with this subset
#warn "at n=$n [@s[0..$i-1]] append $cur\n";

        # block the third element of any new 2-element APs
        my $cur2 = $cur + $cur;
        for (0 .. $i - 1) {
            my $targ = $cur2 - $s[$_];
            next TRY_NEXT if $targ == $n;
            vec($block, $targ, 1) = 1;
        }

        # and prep to add another element
        if ($i < $max) {
            ++$i;
            $s[$i] = $cur;
            $stack[$i] = $block;
            next;
        } else {
            # have solution
            ++$i;
            $s[$i] = $cur;
            $stack[$i] = $block;
            disp({
                s => \@s,
                i => $i,
            }, $n, 1, $iter);
            ++$max;
            $f[$n] = $max;
            ++$n;
            $iter = 0;
        }
    }
    # no solution at n
    $reset->();
    disp({
        s => \@s,
        i => $i,
    }, $n, 0, $iter);
    $f[$n] = $max;
    ++$n;
    $iter = 0;
    goto TRY_NEXT;
}
