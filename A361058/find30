#!/opt/maths/bin/perl
use strict;
use warnings;
use List::Util qw{ first all };
use Math::GMP;

use lib 'lib';
use Totient;

use lib '../lib';
use H::Heap;
use H::Diag qw{ diag keep_diag };

my $startn = Math::GMP->new(shift(@ARGV) || qw{
    10819943828999706238674145962073807388672
});
my @primes = map Math::GMP->new($_), (2, 31, 858874531);
my $powers = Powers->new(\@primes);
# assume we need 2.31^6.858874531 dividing all
my $mul1 = $primes[0] * $primes[1] ** 6 * $primes[2];
my $mul2 = 30;
my $mul3 = 30;

$startn /= $mul1;
$powers->fetch while $powers->peek->[0] < $startn;

while (my $s = $powers->fetch) {
    my($n, $e) = @$s;
    $n *= $mul1;
    diag("try n=$n [@$e]");

    my $t1 = $n * $mul2;
    my @x = Totient::totient($t1);
    if (@x == 0) {
#       keep_diag();
#       print "  skip, $t1 nontotient\n";
        next;
    }
    my $x0 = first { Math::GMP->new($_) % 31 } @x;
    if ($x0) {
#       keep_diag();
#       print "  skip, $t1 has bad solution $x0\n";
        next;
    }
    my $t2 = $t1 * $mul2;
    my @x2 = Totient::totient($t2);
    if (@x2 == 0) {
        keep_diag();
        die "  solution at $n [@x]\n";
    }
    splice @x, 10 if @x > 10;
    splice @x2, 10 if @x2 > 10;
    keep_diag();
    print "$n [@$e]:  $t1 [@x]\n  $t2 [@x2]\n";
}

# given a list of primes, generate all numbers having only those as prime
# factors, in increasing order.
package Powers {
    sub new {
        my($class, $primes) = @_;
        my $heap = H::Heap->new(q{ $a->[0] <=> $b->[0] });
        my $n = Math::GMP->new(1);
        my $e = [ (0) x @$primes ];
        $heap->insert([ $n, $e ]);
        return bless {
            p => $primes,
            h => $heap,
        };
    }
    sub fetch {
        my($self) = @_;
        my($h, $p) = @$self{qw{ h p }};
        my($n, $e) = @{ $h->fetch };
        for my $i (0 .. $#$p) {
            my $e2 = [ @$e ];
            ++$e2->[$i];
            $h->insert([ $n * $p->[$i], $e2 ]);
            last if $e->[$i];
        }
        return [ $n, $e ];
    }
    sub peek { shift->{h}->peek }
};
