#!/opt/maths/bin/perl
use strict;
use warnings;
use Math::BigInt qw{ lib GMP };
use Math::BigRat qw{ lib GMP };
use Math::Prime::Util qw{ factor_exp divisors sqrtmod divmod invmod };
use List::Util qw{ first };
use lib '../lib';
use H::Diag qw{ diag keep_diag };
sub usq { return Math::BigRat->new(1, $_[0] * $_[0]) }

my $bestn;
while (@ARGV && $ARGV[0] =~ /^-/) {
    my $arg = shift @ARGV;
    last if $arg eq '--';
    $bestn = $1 || shift(@ARGV), next if $arg =~ /^-b(\d*)$/;
    die "unknown option '$arg'";
}
my($p, $q) = @ARGV;
my %exclude = map +($_ => 1), @ARGV[2..$#ARGV];
my $r = Math::BigRat->new($p, $q);
print "trying $r\n";
my $max_factors = 1e6;
my $max_loop = 25;

# find min for continuous run
my @sq;
for ($sq[0] = 1; 1; ++$sq[0]) {
    ++$sq[0] while $exclude{$sq[0]};
    my $rmin = usq($sq[0]);
    next if $rmin > $r;
    $r -= $rmin;
    last;
}
print "min $sq[0] leaving $r\n";

# find max for continuous run
while (1) {
    my $i = @sq;
    my $n = $sq[$i - 1] + 1;
    ++$n while $exclude{$n};
    my $rmax = usq($n);
    last if $rmax > $r;
    push @sq, $n;
    $r -= $rmax;
}
print "max $sq[-1] leaving $r\n";

my $self = Struc->new($r, \@sq);
while (1) {
    if ($self->{factors} <= $max_factors) {
        printf "try %s with root %s (%s factors)\n",
                @$self{qw{ r root factors}};
        last if try_factors($self);
        expand_factors($self);
    } else {
        print "try cast from $self->{factors} factors\n";
        try_cast($self);
    }
}
#printf "logs: [%s]\n", loglog();
exit 0;

our(@d, %d);
my @cur;
#my @log2;
#sub loglog { join ' ', map $_ // 0, @log2 }
sub try_srg {
    use feature qw{ state };
    state $counter = 0;
    my($targ, $cur, $min, $best) = @_;
#++$log2[$targ->log2];
diag("t=$targ c=$cur m=$min b=@{[ $best // 'u' ]} [@cur]")
#diag("t=$targ c=$cur m=$min b=@{[ $best // 'u' ]} [@cur] [@{[loglog()]}]")
        if (++$counter % 100000) == 0;
    return unless $d[$min];
    my $exact = $d{$targ};
    if ($exact && $exact >= $d[$min][0]) {
        my @all = sort { $a <=> $b } (@sq, @cur, $exact);
        keep_diag();
        print 0+@all, " [@all]\n";
#       print 0+@all, " [@all] [@{[loglog()]}]\n";
        return [$exact];
    }

    # if not exact, will need at least $cur + 2
    return if defined($best) && $cur + 2 >= $best;

    my $tried;
    for my $this ($min .. $#d) {
        my($d, $v) = @{ $d[$this] };
        next if $v > $targ;
        last if defined($best) && (
            $targ > $v * ($best - $cur - 1)
        );
        local $cur[$cur] = $d;
        my $got = try_srg($targ - $v, $cur + 1, $this + 1, $best)
                // next;
        $tried = [ $d, @$got ];
        $best = @$tried + $cur;
    }
    return $tried;
}

# try simple recursive greedy over divisors of root
sub try_factors {
    my($self) = @_;
    my($p, $q, $root) = @$self{qw{ p q root }};
    local @d = map [ $_, $q / $_ / $_ ], divisors($root);
    local %d = map +($_->[1] => $_->[0]), @d;

    # try simple recursive greedy
    my $best = try_srg($p, 0, 0, $bestn ? $bestn - @sq : undef);
    keep_diag();
    return 0 unless $best;
    $bestn = @sq + @$best;
    print "best srg $bestn [@sq @$best]\n";
    return 1;
}

# reset p/q to k^2p/k^2q so that sqrt(k^2q) is divisible by the least factor
# that doesn't already divide sqrt(q); recalc root and factors
sub expand_factors {
    my($self) = @_;
    my $root = $self->{root};
    my $n = 2;
    ++$n while ($root % $n) == 0;
    my $p = $n / $root->bgcd($n);
    $self->denorm($p);
    return;
}

package Struc {
    use Math::Prime::Util qw{ factor_exp divisors sqrtmod divmod };
    sub new {
        my($class, $r, $sq) = @_;
        my $self = bless {
            r => $r,
            sq => \@sq,
            seen => {},
        };
        $self->init;
        return $self;
    }

    # denormalize p/q so that q is a square; set up root=sqrt(q), rfq as
    # its factors, and count the factors
    sub init {
        my($self) = @_;
        my $root = Math::BigInt->new(1);
        my $factors = Math::BigInt->new(1);
        my $r = $self->{r};
        my($p, $q) = ($r->numerator, $r->denominator);
        my @fq = factor_exp($q);
        my $maxp = $fq[-1][0];
        my @rfq = sort { $a->{proot} <=> $b->{proot} } map {
            my($prime, $base_exp) = @$_;
            my $root_exp = $base_exp >> 1;
            if ($base_exp & 1) {
                $p *= $prime;
                $q *= $prime;
                ++$root_exp;
            }
            my $proot = $prime ** $root_exp;
            # raise small primes to at least half the greatest prime
            while ($proot * $prime * 2 < $maxp) {
                $p *= $prime * $prime;
                $q *= $prime * $prime;
                $proot *= $prime;
                ++$root_exp;
            }
            $root *= $proot;
            $factors *= $root_exp + 1;
            {
                prime => $prime,
                base_exp => $base_exp,
                root_exp => $root_exp,
                proot => $proot,
            };
        } @fq;
        my %reverse = map +($rfq[$_]{prime} => $_), 0 .. $#rfq;
        @$self{qw{ p q root factors rfq reverse }}
                = ($p, $q, $root, $factors, \@rfq, \%reverse);
        return;
    }

    sub try_add {
        my($self, $k) = @_;
print("try_add: $k already seen\n"),
        return 0 if $self->{seen}{$k};
        my $usq = Math::BigRat->new(1, $k * $k);
print("try_add: 1/$k^2 too large\n"),
        return 0 if $self->{r} < $usq;

        $self->{r} -= $usq;
        print "push $k giving $self->{r}\n";
        push @{ $self->{sq} }, $k;
        $self->{seen}{$k} = 1;
        $self->init;
        return 1;
    }

    sub denorm {
        my($self, $p) = @_;
        my $rfq = $self->{rfq};
        my $i = $self->{reverse}{$p};
        my $f = defined($i) ? $rfq->[$i] : {
            prime => $p,
            base_exp => 0,
            root_exp => 0,
            proot => Math::BigInt->new(1),
        };
        ++$f->{root_exp};
        $f->{proot} *= $p;
        $self->{p} *= $p * $p;
        $self->{q} *= $p * $p;
        $self->{root} *= $p;
        $self->{factors} = $self->{factors}
                * ($f->{root_exp} + 1) / $f->{root_exp};
        push @$rfq, $f unless defined $i;
        @$rfq = sort { $a->{proot} <=> $b->{proot} } @$rfq;
        $self->{rfq} = $rfq;
        $self->{reverse} = { map +($rfq->[$_]{prime} => $_), 0 .. $#$rfq };
        return;
    }
};

# Reduce factors in root by casting out the highest prime power dividing it.
# Generally, subtracting 1/c^2 from target a/(bc)^2 gives (a-b^2)/(bc)^2,
# so we want to find some b such that a == b^2 (mod p^{2e}) for some p^e
# dividing c, ideally with b a product of type 2 factors (which cannot
# be cast out with a single square) and avoiding type 1 factors (which can).
sub try_cast {
    my($self) = @_;
    my($p, $q, $r, $rfq, $root) = @$self{qw{ p q r rfq root }};
    my($f1, $sq1);
    my $targ = Math::BigInt->new(1);
    for my $f (@$rfq) {
        my($prime, $exp) = @$f{qw{ prime root_exp }};
        my $p2 = $prime * $prime;
        my $sq = sqrtmod($p % $p2 , $p2);
        if ($sq) {
            # only if there's a root _and_ it's non-zero
            $sq1 = $sq;
            $f1 = $f;
            $f->{sq} = 1;
        } else {
            $targ *= $f->{proot};
            $f->{sq} = 0;
        }
    }
print "targ = $targ\n";
    if ($f1) {
        # ideal target is $targ * $f1->{proot}
        my($prime, $root_exp, $proot) = @$f1{qw{ prime root_exp proot }};
        my $v = $prime * $prime;
        my $want = $p % $v;
        print "try type 1 p=$prime^$root_exp want $want\n";
        my $have = $root / $proot / $targ;
        my $havem = ($have * $have) % $v;
        if ($havem == $want) {
            print "  stage 0 success with $targ\n";
            if ($self->try_add($targ * $proot)) {
                my($rfq2, $rev2) = @$self{qw{ rfq reverse }};
                if (defined $rev2->{$prime}) {
                    my $f2 = $rfq2->[$rev2->{$prime}];
                    die "cast failed" if $f2->{root_exp} >= $root_exp;
                }
                print "try_cast ok 1.0 $prime^$root_exp\n";
                return;
            } else {
                print "try_cast failed 1.0 $prime^$root_exp\n";
            }
        }
        my %known = ($havem => $targ);
        for my $c (0 .. $max_loop) {
            my $f2 = $rfq->[$c];
            next if $f1 == $f2;
            my($prime2, $exp2) = @$f2{qw{ prime root_exp }};

            # if was excluded, try including it; else vice-versa
            my $incl = $f2->{sq} ? 1 : 0;
            my $m2p = $incl ? invmod($prime2, $v): ($prime2 % $v);
            $m2p = ($m2p * $m2p) % $v;
            for my $h (keys %known) {
                my $t = $known{$h};
                for my $power (1 .. $exp2) {
                    my $h = ($h * $m2p) % $v;
                    my $t = $incl ? ($t * $prime2) : ($t / $prime2);
                    if ($h == $want) {
                        print "  stage $c success with $t\n";
                        if ($self->try_add($t * $proot)) {
                            my($rfq2, $rev2) = @$self{qw{ rfq reverse }};
                            if (defined $rev2->{$prime}) {
                                my $fq2 = $rfq2->[$rev2->{$prime}];
                                if ($fq2->{root_exp} >= $root_exp) {
print "before: $r = $p / $q, root = $root; apply $t * $proot leaving $self->{r} = $self->{p} / $self->{q}, root = $root\n";
                                    die "cast failed";
                                }
                            }
                            print "try_cast ok 1.$c $prime^$root_exp\n";
                            return;
                        } else {
                            print "try_cast failed 1.$c $prime^$root_exp\n";
                        }
                    }
                    $known{$h} //= $t;
                }
            }
        }
        die "too many loops, what next?";
    } else {
        die "todo: no f1";
    }
    # everything failed, try forcing the issue with first available
    my $x = ($q / $p)->bsqrt + 1;
    print "try force from x=$x\n";
    while (1) {
        if (($root % $x) == 0) {
            if ($self->try_add($x)) {
                print "try_cast: force $x\n";
                return;
            } else {
                print "try_add force failed for $x\n";
                ++$x;
                next;
            }
        }
        $x += $x->bgcd($root);
    }
    die "try_cast: nothing left to try\n";
}

package Math::BigInt {
    sub log2 {
        my $value = shift->{value};
        die unless $value->isa('Math::BigInt::GMP');
        return gmp_log2($value);
    }

    use Inline qw{ C config libs -lgmp };
    use Inline C => <<C;
#include <gmp.h>
int gmp_log2(SV *sv) {
    MAGIC *mg;
    mpz_t *z = NULL;
    for (mg = SvMAGIC(SvRV(sv)); mg; mg = mg->mg_moremagic) {
        if (mg->mg_type == PERL_MAGIC_ext) {
            z = (mpz_t *)mg->mg_ptr;
        }
    }
    if (!z)
        return 0;
    return mpz_sizeinbase(*z, 2);
}
C
};
